--// Evade.cc - Enhanced Professional Script
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Camera = game.Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local Drawing = Drawing or nil

-- Feature configuration
local Config = {
    Aimbot = {
        Enabled = false,
        Key = "MouseButton2",
        KeyMode = "Hold",
        HitPart = "Head",
        Team = false,
        Wall = false,
        Prediction = {
            Enabled = true,
            Value = 0.165
        }
    },
    SilentAim = {
        Enabled = false,
        HitChance = 100,
        Range = 350 -- Increased range for more blatant silent aim
    },
    TriggerBot = {
        Enabled = false,
        Delay = 15, -- Reduced delay for more responsive triggering
        Radius = 50, -- Slightly increased FOV
        FOV = 15,
        Distance = 400, -- Increased distance
        ShowFOV = true
    },
    ESP = {
        Enabled = false,
        BoxColor = Color3.fromRGB(0, 255, 255), -- Cyan color
        TeamColor = false
    },
    Misc = {
        NoRecoil = false,
        AutoHeal = false,
        SpeedEnabled = false,
        SpeedValue = 1
    },
    UI = {
        Visible = true,
        Theme = {
            Background = Color3.fromRGB(25, 25, 25), -- Black background
            Accent = Color3.fromRGB(0, 255, 255),    -- Cyan accent
            Text = Color3.fromRGB(255, 255, 255),    -- White text
            Secondary = Color3.fromRGB(40, 40, 40),  -- Darker secondary color
            Tertiary = Color3.fromRGB(50, 50, 50)    -- Lightest shade for highlights
        }
    }
}

-- Create a better optimized UI
local EvadeCC = Instance.new("ScreenGui")
EvadeCC.Name = "Evade.cc"
EvadeCC.ResetOnSpawn = false
EvadeCC.Parent = game:GetService("CoreGui")

-- Create a function for UI elements to reduce repetition
local function createUIElement(className, properties, parent)
    local element = Instance.new(className)
    for property, value in pairs(properties) do
        element[property] = value
    end
    element.Parent = parent
    return element
end

-- Main UI Frame
local MainFrame = createUIElement("Frame", {
    Size = UDim2.new(0, 450, 0, 350),
    Position = UDim2.new(0.5, -225, 0.5, -175),
    BackgroundColor3 = Config.UI.Theme.Background,
    BorderSizePixel = 0,
    Active = true,
    ClipsDescendants = true
}, EvadeCC)

-- Add rounded corners
local UICorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 8)
}, MainFrame)

-- Add frame shadow
local Shadow = createUIElement("ImageLabel", {
    Size = UDim2.new(1, 24, 1, 24),
    Position = UDim2.new(0, -12, 0, -12),
    BackgroundTransparency = 1,
    Image = "rbxassetid://6015897843", -- Shadow image
    ImageColor3 = Color3.fromRGB(0, 0, 0),
    ImageTransparency = 0.6,
    SliceCenter = Rect.new(49, 49, 450, 450),
    ScaleType = Enum.ScaleType.Slice,
    SliceScale = 0.04
}, MainFrame)

-- Make the UI draggable
local isDragging = false
local dragStart = nil
local startPos = nil

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- Title Bar with gradient
local TitleBar = createUIElement("Frame", {
    Size = UDim2.new(1, 0, 0, 36),
    BackgroundColor3 = Config.UI.Theme.Secondary,
    BorderSizePixel = 0
}, MainFrame)

local TitleBarCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 8)
}, TitleBar)

local TitleBarGradient = createUIElement("UIGradient", {
    Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Config.UI.Theme.Secondary),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(45, 45, 45))
    },
    Rotation = 90
}, TitleBar)

-- Title Text with icon
local TitleContainer = createUIElement("Frame", {
    Size = UDim2.new(0.6, 0, 1, 0),
    Position = UDim2.new(0, 12, 0, 0),
    BackgroundTransparency = 1
}, TitleBar)

local TitleIcon = createUIElement("ImageLabel", {
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(0, 0, 0.5, -10),
    BackgroundTransparency = 1,
    Image = "rbxassetid://7733715400", -- Targeting icon
    ImageColor3 = Config.UI.Theme.Accent
}, TitleContainer)

local TitleText = createUIElement("TextLabel", {
    Size = UDim2.new(1, -25, 1, 0),
    Position = UDim2.new(0, 25, 0, 0),
    BackgroundTransparency = 1,
    Text = "evade.cc",
    TextColor3 = Config.UI.Theme.Text,
    TextSize = 18,
    Font = Enum.Font.GothamBold,
    TextXAlignment = Enum.TextXAlignment.Left
}, TitleContainer)

-- Version Text
local VersionText = createUIElement("TextLabel", {
    Size = UDim2.new(0, 80, 1, 0),
    Position = UDim2.new(0.5, -40, 0, 0),
    BackgroundTransparency = 1,
    Text = "v2.0 PREMIUM",
    TextColor3 = Config.UI.Theme.Accent,
    TextSize = 12,
    Font = Enum.Font.Gotham
}, TitleBar)

-- Hide/Show Button
local HideButton = createUIElement("TextButton", {
    Size = UDim2.new(0, 28, 0, 28),
    Position = UDim2.new(1, -36, 0, 4),
    BackgroundColor3 = Config.UI.Theme.Tertiary,
    BorderSizePixel = 0,
    Text = "-",
    TextColor3 = Config.UI.Theme.Text,
    TextSize = 18,
    Font = Enum.Font.GothamBold
}, TitleBar)

local HideButtonCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 4)
}, HideButton)

HideButton.MouseButton1Click:Connect(function()
    Config.UI.Visible = not Config.UI.Visible
    if Config.UI.Visible then
        MainFrame.Size = UDim2.new(0, 450, 0, 350)
        HideButton.Text = "-"
    else
        MainFrame.Size = UDim2.new(0, 450, 0, 36)
        HideButton.Text = "+"
    end
end)

-- Close Button
local CloseButton = createUIElement("TextButton", {
    Size = UDim2.new(0, 28, 0, 28),
    Position = UDim2.new(1, -70, 0, 4),
    BackgroundColor3 = Color3.fromRGB(195, 40, 40),
    BorderSizePixel = 0,
    Text = "Ã—",
    TextColor3 = Config.UI.Theme.Text,
    TextSize = 18,
    Font = Enum.Font.GothamBold
}, TitleBar)

local CloseButtonCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 4)
}, CloseButton)

CloseButton.MouseButton1Click:Connect(function()
    EvadeCC:Destroy()
end)

-- Content Frame
local ContentFrame = createUIElement("Frame", {
    Size = UDim2.new(1, 0, 1, -36),
    Position = UDim2.new(0, 0, 0, 36),
    BackgroundColor3 = Config.UI.Theme.Background,
    BorderSizePixel = 0
}, MainFrame)

-- Sidebar for tabs
local Sidebar = createUIElement("Frame", {
    Size = UDim2.new(0, 120, 1, 0),
    BackgroundColor3 = Config.UI.Theme.Secondary,
    BorderSizePixel = 0
}, ContentFrame)

local SidebarCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 8)
}, Sidebar)

local SidebarPadding = createUIElement("UIPadding", {
    PaddingTop = UDim.new(0, 10),
    PaddingBottom = UDim.new(0, 10),
    PaddingLeft = UDim.new(0, 10),
    PaddingRight = UDim.new(0, 10)
}, Sidebar)

-- Tab Content area
local TabContent = createUIElement("Frame", {
    Size = UDim2.new(1, -130, 1, -10),
    Position = UDim2.new(0, 125, 0, 5),
    BackgroundColor3 = Config.UI.Theme.Background,
    BorderSizePixel = 0
}, ContentFrame)

-- Create Tabs with icons
local Tabs = {
    {Name = "Aimbot", Icon = "rbxassetid://7733774602"}, -- Crosshair
    {Name = "Visuals", Icon = "rbxassetid://7733715400"}, -- Eye
    {Name = "Misc", Icon = "rbxassetid://7734053495"}, -- Settings gear
    {Name = "Settings", Icon = "rbxassetid://7733964370"} -- Wrench
}

local TabFrames = {}
local ActiveTab = "Aimbot"

for i, tab in ipairs(Tabs) do
    -- Tab Container
    local TabContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 32),
        Position = UDim2.new(0, 0, 0, 40 * (i-1)),
        BackgroundTransparency = 1
    }, Sidebar)
    
    -- Tab Button
    local TabButton = createUIElement("TextButton", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = tab.Name == ActiveTab and Config.UI.Theme.Accent or Config.UI.Theme.Secondary,
        BackgroundTransparency = tab.Name == ActiveTab and 0 or 0.5,
        Text = "",
        AutoButtonColor = false
    }, TabContainer)
    
    local TabButtonCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 6)
    }, TabButton)
    
    -- Tab Icon
    local TabIcon = createUIElement("ImageLabel", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 5, 0.5, -8),
        BackgroundTransparency = 1,
        Image = tab.Icon,
        ImageColor3 = tab.Name == ActiveTab and Config.UI.Theme.Text or Color3.fromRGB(200, 200, 200)
    }, TabButton)
    
    -- Tab Label
    local TabLabel = createUIElement("TextLabel", {
        Size = UDim2.new(1, -26, 1, 0),
        Position = UDim2.new(0, 26, 0, 0),
        BackgroundTransparency = 1,
        Text = tab.Name,
        TextColor3 = tab.Name == ActiveTab and Config.UI.Theme.Text or Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left
    }, TabButton)
    
    -- Tab Indicator
    local TabIndicator = createUIElement("Frame", {
        Size = UDim2.new(0, 3, 0.7, 0),
        Position = UDim2.new(0, 0, 0.15, 0),
        BackgroundColor3 = Config.UI.Theme.Accent,
        BackgroundTransparency = tab.Name == ActiveTab and 0 or 1
    }, TabButton)
    
    local TabIndicatorCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 2)
    }, TabIndicator)
    
    -- Tab Content Frame
    local TabFrame = createUIElement("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Config.UI.Theme.Accent,
        Visible = tab.Name == ActiveTab,
        CanvasSize = UDim2.new(0, 0, 2, 0),
        ScrollingDirection = Enum.ScrollingDirection.Y,
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    }, TabContent)
    
    local TabFramePadding = createUIElement("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10),
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10)
    }, TabFrame)
    
    TabFrames[tab.Name] = TabFrame
    
    -- Tab Button Click
    TabButton.MouseButton1Click:Connect(function()
        ActiveTab = tab.Name
        
        -- Update tab visibility
        for _, frame in pairs(TabFrames) do
            frame.Visible = false
        end
        TabFrame.Visible = true
        
        -- Update tab appearances
        for _, container in ipairs(Sidebar:GetChildren()) do
            if container:IsA("Frame") then
                local button = container:FindFirstChildOfClass("TextButton")
                if button then
                    local icon = button:FindFirstChildOfClass("ImageLabel")
                    local label = button:FindFirstChildOfClass("TextLabel")
                    local indicator = button:FindFirstChildOfClass("Frame")
                    
                    if container ~= TabContainer then
                        button.BackgroundColor3 = Config.UI.Theme.Secondary
                        button.BackgroundTransparency = 0.5
                        if label then label.TextColor3 = Color3.fromRGB(200, 200, 200) end
                        if icon then icon.ImageColor3 = Color3.fromRGB(200, 200, 200) end
                        if indicator then indicator.BackgroundTransparency = 1 end
                    else
                        button.BackgroundColor3 = Config.UI.Theme.Accent
                        button.BackgroundTransparency = 0
                        if label then label.TextColor3 = Config.UI.Theme.Text end
                        if icon then icon.ImageColor3 = Config.UI.Theme.Text end
                        if indicator then indicator.BackgroundTransparency = 0 end
                    end
                end
            end
        end
    end)
end

-- Create a section function
local function createSection(title, parent)
    local sectionContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 10)
    }, parent)
    
    local sectionTitle = createUIElement("TextLabel", {
        Size = UDim2.new(0.5, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = Config.UI.Theme.Accent,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left
    }, sectionContainer)
    
    local sectionLine = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundColor3 = Config.UI.Theme.Accent,
        BackgroundTransparency = 0.7
    }, sectionContainer)
    
    return sectionContainer
end

-- Create a toggle button function
local function createToggle(name, parent, callback, initialState, description)
    local toggleContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45),
        BackgroundColor3 = Config.UI.Theme.Secondary,
        BorderSizePixel = 0
    }, parent)
    
    local toggleCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 6)
    }, toggleContainer)
    
    local toggleLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.7, 0, 0.5, 0),
        Position = UDim2.new(0, 12, 0, 5),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = Config.UI.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left
    }, toggleContainer)
    
    if description then
        local toggleDescription = createUIElement("TextLabel", {
            Size = UDim2.new(0.7, 0, 0.5, 0),
            Position = UDim2.new(0, 12, 0.5, 0),
            BackgroundTransparency = 1,
            Text = description,
            TextColor3 = Color3.fromRGB(180, 180, 180),
            TextSize = 12,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left
        }, toggleContainer)
    end
    
    local toggleButton = createUIElement("Frame", {
        Size = UDim2.new(0, 44, 0, 22),
        Position = UDim2.new(0.9, -44, 0.5, -11),
        BackgroundColor3 = initialState and Config.UI.Theme.Accent or Color3.fromRGB(80, 80, 80),
        BorderSizePixel = 0
    }, toggleContainer)
    
    local toggleButtonCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, toggleButton)
    
    local toggleIndicator = createUIElement("Frame", {
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(initialState and 0.6 or 0, initialState and 2 or 2, 0, 2),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0
    }, toggleButton)
    
    local toggleIndicatorCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, toggleIndicator)
    
    local toggleClickDetector = createUIElement("TextButton", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = ""
    }, toggleContainer)
    
    toggleClickDetector.MouseButton1Click:Connect(function()
        local newState = not initialState
        initialState = newState
        
        local targetPosition = newState and UDim2.new(0.6, 0, 0, 2) or UDim2.new(0, 2, 0, 2)
        local targetColor = newState and Config.UI.Theme.Accent or Color3.fromRGB(80, 80, 80)
        
        TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = targetPosition}):Play()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
        
        callback(newState)
    end)
    
    return toggleContainer
end

-- Create a slider function
local function createSlider(name, parent, min, max, initialValue, callback, description)
    local sliderContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 60),
        Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45),
        BackgroundColor3 = Config.UI.Theme.Secondary,
        BorderSizePixel = 0
    }, parent)
    
    local sliderCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 6)
    }, sliderContainer)
    
    local sliderLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.7, 0, 0, 20),
        Position = UDim2.new(0, 12, 0, 8),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = Config.UI.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left
    }, sliderContainer)
    
    local valueLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.15, 0, 0, 20),
        Position = UDim2.new(0.85, -12, 0, 8),
        BackgroundColor3 = Config.UI.Theme.Tertiary,
        Text = tostring(initialValue),
        TextColor3 = Config.UI.Theme.Text,
        TextSize = 12,
        Font = Enum.Font.GothamBold
    }, sliderContainer)
    
    local valueLabelCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 4)
    }, valueLabel)
    
    if description then
        local sliderDescription = createUIElement("TextLabel", {
            Size = UDim2.new(0.7, 0, 0, 16),
            Position = UDim2.new(0, 12, 0, 28),
            BackgroundTransparency = 1,
            Text = description,
            TextColor3 = Color3.fromRGB(180, 180, 180),
            TextSize = 12,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left
        }, sliderContainer)
    end
    
    local sliderTrack = createUIElement("Frame", {
        Size = UDim2.new(0.95, 0, 0, 6),
        Position = UDim2.new(0.025, 0, 0.8, -3),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        BorderSizePixel = 0
    }, sliderContainer)
    
    local sliderTrackCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, sliderTrack)
    
    local sliderFill = createUIElement("Frame", {
        Size = UDim2.new((initialValue - min) / (max - min), 0, 1, 0),
        BackgroundColor3 = Config.UI.Theme.Accent,
        BorderSizePixel = 0
    }, sliderTrack)
    
    local sliderFillCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, sliderFill)
    
    local sliderKnob = createUIElement("Frame", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new((initialValue - min) / (max - min), -8, 0.5, -8),
        BackgroundColor3 = Config.UI.Theme.Text,
        BorderSizePixel = 0
    }, sliderTrack)
    
    local sliderKnobCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, sliderKnob)
    
    local sliderKnobStroke = createUIElement("UIStroke", {
        Color = Config.UI.Theme.Accent,
        Thickness = 2
    }, sliderKnob)
    
    local isDragging = false
    
    sliderKnob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
        end
    end)
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            
            local relativeX = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * relativeX
            value = math.floor(value * 10) / 10 -- Round to 1 decimal place
            
            sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
            sliderKnob.Position = UDim2.new(relativeX, -8, 0.5, -8)
            valueLabel.Text = tostring(value)
            callback(value)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativeX = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * relativeX
            value = math.floor(value * 10) / 10 -- Round to 1 decimal place
            
            sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
            sliderKnob.Position = UDim2.new(relativeX, -8, 0.5, -8)
            valueLabel.Text = tostring(value)
            callback(value)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    return sliderContainer
end

-- Create a dropdown function
local function createDropdown(name, parent, options, initialValue, callback)
    local dropdownContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45),
        BackgroundColor3 = Config.UI.Theme.Secondary,
        BorderSizePixel = 0,
        ClipsDescendants = true
    }, parent)
    
    local dropdownCorner = createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 6)
    }, dropdownContainer)
    
    local dropdownLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.7, 0, 0.5, 0),
        Position = UDim2.new(0, 12, 0, 5),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = Config.UI.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left
    }, dropdownContainer)
    
    local selectedLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.5, 0, 0.5, 0),
        Position = UDim2.new(0, 12, 0.5, 0),
        BackgroundTransparency = 1,
        Text = initialValue,
        TextColor3 = Config.UI.Theme.Accent,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left
    }, dropdownContainer)
    
    local dropdownArrow = createUIElement("ImageLabel", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0.95, -16, 0.5, -8),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072706663", -- Arrow icon
        ImageColor3 = Config.UI.Theme.Accent,
        Rotation = 0
    }, dropdownContainer)
