-- MatrixHub-Style Evade.cc - Enhanced PvP Script (UNC Compatible)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HRP = Character:WaitForChild("HumanoidRootPart")
local Camera = workspace.CurrentCamera

-- Make sure we update character references when character respawns
LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
    Character = NewCharacter
    Humanoid = Character:WaitForChild("Humanoid")
    HRP = Character:WaitForChild("HumanoidRootPart")
end)

-- Check for UNC executor limitations
local UNCSupport = {
    DrawingLibrary = (Drawing ~= nil),
    TweenService = pcall(function() return game:GetService("TweenService") end)
}

-- Simple UI framework for UNC executors
local SimpleUI = {}
SimpleUI.__index = SimpleUI

function SimpleUI.new(title)
    local gui = Instance.new("ScreenGui")
    gui.Name = "MatrixEvadeCC"
    gui.ResetOnSpawn = false
    
    -- Make GUI visible in lower level executors
    if syn then
        syn.protect_gui(gui)
        gui.Parent = game:GetService("CoreGui")
    elseif gethui then
        gui.Parent = gethui()
    elseif game:GetService("CoreGui"):FindFirstChild("RobloxGui") then
        gui.Parent = game:GetService("CoreGui").RobloxGui
    else
        gui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    end

    local main = Instance.new("Frame")
    main.Name = "MainFrame"
    main.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    main.BorderColor3 = Color3.fromRGB(0, 180, 255)
    main.BorderSizePixel = 1
    main.Position = UDim2.new(0.5, -175, 0.5, -150)
    main.Size = UDim2.new(0, 350, 0, 300)
    main.Active = true
    main.Draggable = true -- Make window draggable for UNC
    main.Parent = gui

    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.BackgroundColor3 = Color3.fromRGB(18, 18, 23)
    titleBar.BorderSizePixel = 0
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.Parent = main

    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.BackgroundTransparency = 1
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.Size = UDim2.new(1, -20, 1, 0)
    titleText.Font = Enum.Font.SourceSansBold
    titleText.Text = title
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextSize = 16
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar

    -- Simple Tab System
    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "TabContainer"
    tabContainer.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    tabContainer.BorderSizePixel = 0
    tabContainer.Position = UDim2.new(0, 0, 0, 30)
    tabContainer.Size = UDim2.new(1, 0, 0, 30)
    tabContainer.Parent = main

    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    contentFrame.BorderSizePixel = 0
    contentFrame.Position = UDim2.new(0, 0, 0, 60)
    contentFrame.Size = UDim2.new(1, 0, 1, -60)
    contentFrame.Parent = main

    local self = setmetatable({
        GUI = gui,
        Main = main,
        ContentFrame = contentFrame,
        TabButtons = {},
        TabFrames = {},
        CurrentTab = nil,
        TabContainer = tabContainer
    }, SimpleUI)

    return self
end

function SimpleUI:AddTab(name)
    local tabCount = #self.TabContainer:GetChildren() - 1
    local tabWidth = 1 / (tabCount + 1)
    
    -- Resize existing tabs
    for _, button in pairs(self.TabButtons) do
        button.Size = UDim2.new(tabWidth, 0, 1, 0)
        -- Reposition buttons
        local index = button:FindFirstChild("Index").Value
        button.Position = UDim2.new(tabWidth * (index - 1), 0, 0, 0)
    end
    
    local tabButton = Instance.new("TextButton")
    tabButton.Name = name .. "Button"
    tabButton.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    tabButton.BorderSizePixel = 0
    tabButton.Position = UDim2.new(tabWidth * tabCount, 0, 0, 0)
    tabButton.Size = UDim2.new(tabWidth, 0, 1, 0)
    tabButton.Font = Enum.Font.SourceSans
    tabButton.Text = name
    tabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    tabButton.TextSize = 14
    tabButton.Parent = self.TabContainer
    
    -- Store index for repositioning
    local index = Instance.new("IntValue")
    index.Name = "Index"
    index.Value = tabCount + 1
    index.Parent = tabButton
    
    local tabFrame = Instance.new("ScrollingFrame")
    tabFrame.Name = name .. "Frame"
    tabFrame.BackgroundTransparency = 1
    tabFrame.BorderSizePixel = 0
    tabFrame.Size = UDim2.new(1, 0, 1, 0)
    tabFrame.CanvasSize = UDim2.new(0, 0, 3, 0)
    tabFrame.ScrollBarThickness = 4
    tabFrame.Visible = (self.CurrentTab == nil)
    tabFrame.Parent = self.ContentFrame
    
    -- Select this tab if it's the first one
    if self.CurrentTab == nil then
        self.CurrentTab = name
        tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    end
    
    tabButton.MouseButton1Click:Connect(function()
        self:SelectTab(name)
    end)
    
    self.TabButtons[name] = tabButton
    self.TabFrames[name] = tabFrame
    
    return tabFrame
end

function SimpleUI:SelectTab(name)
    if self.CurrentTab == name then return end
    
    -- Hide all tab frames and reset button colors
    for tabName, frame in pairs(self.TabFrames) do
        frame.Visible = (tabName == name)
        self.TabButtons[tabName].BackgroundColor3 = (tabName == name) and Color3.fromRGB(40, 40, 45) or Color3.fromRGB(20, 20, 25)
        self.TabButtons[tabName].TextColor3 = (tabName == name) and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(200, 200, 200)
    end
    
    self.CurrentTab = name
end

function SimpleUI:AddToggle(tab, name, default, callback)
    local container = Instance.new("Frame")
    container.Name = name .. "Container"
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, -20, 0, 30)
    
    local y = #self.TabFrames[tab]:GetChildren() * 35
    container.Position = UDim2.new(0, 10, 0, y)
    container.Parent = self.TabFrames[tab]
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Font = Enum.Font.SourceSans
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local toggle = Instance.new("Frame")
    toggle.Name = "Toggle"
    toggle.BackgroundColor3 = default and Color3.fromRGB(0, 180, 255) or Color3.fromRGB(50, 50, 55)
    toggle.BorderSizePixel = 0
    toggle.Position = UDim2.new(1, -40, 0.5, -10)
    toggle.Size = UDim2.new(0, 40, 0, 20)
    toggle.Parent = container
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = toggle
    
    local indicator = Instance.new("Frame")
    indicator.Name = "Indicator"
    indicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    indicator.Position = default and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.05, 0, 0.5, -8)
    indicator.Size = UDim2.new(0, 16, 0, 16)
    indicator.BorderSizePixel = 0
    indicator.Parent = toggle
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(1, 0)
    indicatorCorner.Parent = indicator
    
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.BackgroundTransparency = 1
    button.Size = UDim2.new(1, 0, 1, 0)
    button.Text = ""
    button.Parent = container
    
    local value = default
    button.MouseButton1Click:Connect(function()
        value = not value
        
        if UNCSupport.TweenService then
            local tween = game:GetService("TweenService"):Create(
                indicator, 
                TweenInfo.new(0.2), 
                {Position = value and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.05, 0, 0.5, -8)}
            )
            tween:Play()
        else
            indicator.Position = value and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.05, 0, 0.5, -8)
        end
        
        toggle.BackgroundColor3 = value and Color3.fromRGB(0, 180, 255) or Color3.fromRGB(50, 50, 55)
        callback(value)
    end)
    
    -- Return function to update state
    return function(newValue)
        value = newValue
        indicator.Position = value and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.05, 0, 0.5, -8)
        toggle.BackgroundColor3 = value and Color3.fromRGB(0, 180, 255) or Color3.fromRGB(50, 50, 55)
    end
end

function SimpleUI:AddSlider(tab, name, min, max, default, callback)
    local container = Instance.new("Frame")
    container.Name = name .. "Container"
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, -20, 0, 40)
    
    local y = #self.TabFrames[tab]:GetChildren() * 45
    container.Position = UDim2.new(0, 10, 0, y)
    container.Parent = self.TabFrames[tab]
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(0.5, 0, 0, 20)
    label.Font = Enum.Font.SourceSans
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "Value"
    valueLabel.BackgroundTransparency = 1
    valueLabel.Position = UDim2.new(0.5, 0, 0, 0)
    valueLabel.Size = UDim2.new(0.5, 0, 0, 20)
    valueLabel.Font = Enum.Font.SourceSans
    valueLabel.Text = tostring(default)
    valueLabel.TextColor3 = Color3.fromRGB(0, 180, 255)
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = container
    
    local sliderBG = Instance.new("Frame")
    sliderBG.Name = "SliderBG"
    sliderBG.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    sliderBG.BorderSizePixel = 0
    sliderBG.Position = UDim2.new(0, 0, 0, 25)
    sliderBG.Size = UDim2.new(1, 0, 0, 6)
    sliderBG.Parent = container
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(1, 0)
    sliderCorner.Parent = sliderBG
    
    -- Calculate initial fill percentage
    local percent = (default - min) / (max - min)
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 180, 255)
    sliderFill.BorderSizePixel = 0
    sliderFill.Size = UDim2.new(percent, 0, 1, 0)
    sliderFill.Parent = sliderBG
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = sliderFill
    
    local sliderButton = Instance.new("TextButton")
    sliderButton.Name = "SliderButton"
    sliderButton.BackgroundTransparency = 1
    sliderButton.Position = UDim2.new(0, 0, 0, -5)
    sliderButton.Size = UDim2.new(1, 0, 0, 16)
    sliderButton.Text = ""
    sliderButton.Parent = sliderBG
    
    -- Current value
    local value = default
    
    -- Update function
    local function updateSlider(input)
        local relX = math.clamp((input.Position.X - sliderBG.AbsolutePosition.X) / sliderBG.AbsoluteSize.X, 0, 1)
        local newValue = min + (max - min) * relX
        newValue = math.floor(newValue * 10) / 10 -- Round to 1 decimal
        
        value = newValue
        percent = (value - min) / (max - min)
        
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        valueLabel.Text = tostring(value)
        callback(value)
    end
    
    -- Slider input handling
    local dragging = false
    
    sliderButton.MouseButton1Down:Connect(function(input)
        dragging = true
        updateSlider(input)
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Return function to update value
    return function(newValue)
        value = newValue
        percent = (value - min) / (max - min)
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        valueLabel.Text = tostring(value)
    end
end

-- Feature configuration
local Config = {
    Aimbot = {
        Enabled = false,
        Key = Enum.UserInputType.MouseButton2,
        KeyMode = "Hold",
        HitPart = "Head",
        Team = false,
        Wall = false,
        FOVSize = 100,
        ShowFOV = true,
        FOVColor = Color3.fromRGB(255, 255, 255)
    },
    ESP = {
        Enabled = false,
        BoxEnabled = false,
        BoxColor = Color3.fromRGB(255, 0, 0),
        NameEnabled = false,
        NameColor = Color3.fromRGB(255, 255, 255),
        DistanceEnabled = false,
        DistanceColor = Color3.fromRGB(255, 255, 255),
        TracerEnabled = false,
        TracerColor = Color3.fromRGB(255, 0, 0),
        TeamColor = false,
        TeamCheck = false
    },
    TriggerBot = {
        Enabled = false,
        Key = Enum.UserInputType.MouseButton1,
        Delay = 50,
        FOVSize = 10
    },
    Misc = {
        NoRecoil = false,
        AutoHeal = false,
        SpeedEnabled = false,
        SpeedType = "Normal", -- "Normal" or "CFrame"
        SpeedValue = 16,
        CFrameSpeed = 1,
        JumpHeight = 50,
        InfiniteJump = false
    },
    Keybinds = {
        ToggleUI = Enum.KeyCode.Insert
    }
}

-- Create the UI
local UI = SimpleUI.new("Matrix | Evade.CC")

-- Create Tabs
local AimbotTab = UI:AddTab("Aimbot")
local ESPTab = UI:AddTab("ESP")
local TriggerTab = UI:AddTab("TriggerBot")
local MiscTab = UI:AddTab("Misc")
local SettingsTab = UI:AddTab("Settings")

-- Aimbot Tab
local aimbotToggle = UI:AddToggle(AimbotTab.Name, "Enabled", Config.Aimbot.Enabled, function(value)
    Config.Aimbot.Enabled = value
end)

local fovSizeSlider = UI:AddSlider(AimbotTab.Name, "FOV Size", 10, 500, Config.Aimbot.FOVSize, function(value)
    Config.Aimbot.FOVSize = value
end)

local showFOVToggle = UI:AddToggle(AimbotTab.Name, "Show FOV", Config.Aimbot.ShowFOV, function(value)
    Config.Aimbot.ShowFOV = value
end)

local teamCheckToggle = UI:AddToggle(AimbotTab.Name, "Team Check", Config.Aimbot.Team, function(value)
    Config.Aimbot.Team = value
end)

local wallCheckToggle = UI:AddToggle(AimbotTab.Name, "Wall Check", Config.Aimbot.Wall, function(value)
    Config.Aimbot.Wall = value
end)

-- ESP Tab
local espToggle = UI:AddToggle(ESPTab.Name, "Enabled", Config.ESP.Enabled, function(value)
    Config.ESP.Enabled = value
end)

local boxToggle = UI:AddToggle(ESPTab.Name, "Boxes", Config.ESP.BoxEnabled, function(value)
    Config.ESP.BoxEnabled = value
end)

local nameToggle = UI:AddToggle(ESPTab.Name, "Names", Config.ESP.NameEnabled, function(value)
    Config.ESP.NameEnabled = value
end)

local distanceToggle = UI:AddToggle(ESPTab.Name, "Distance", Config.ESP.DistanceEnabled, function(value)
    Config.ESP.DistanceEnabled = value
end)

local tracerToggle = UI:AddToggle(ESPTab.Name, "Tracers", Config.ESP.TracerEnabled, function(value)
    Config.ESP.TracerEnabled = value
end)

local teamColorToggle = UI:AddToggle(ESPTab.Name, "Team Colors", Config.ESP.TeamColor, function(value)
    Config.ESP.TeamColor = value
end)

local espTeamCheckToggle = UI:AddToggle(ESPTab.Name, "Team Check", Config.ESP.TeamCheck, function(value)
    Config.ESP.TeamCheck = value
end)

-- TriggerBot Tab
local triggerToggle = UI:AddToggle(TriggerTab.Name, "Enabled", Config.TriggerBot.Enabled, function(value)
    Config.TriggerBot.Enabled = value
end)

local triggerDelaySlider = UI:AddSlider(TriggerTab.Name, "Delay (ms)", 0, 500, Config.TriggerBot.Delay, function(value)
    Config.TriggerBot.Delay = value
end)

local triggerFOVSlider = UI:AddSlider(TriggerTab.Name, "FOV Size", 5, 100, Config.TriggerBot.FOVSize, function(value)
    Config.TriggerBot.FOVSize = value
end)

-- Misc Tab
local speedToggle = UI:AddToggle(MiscTab.Name, "Speed Enabled", Config.Misc.SpeedEnabled, function(value)
    Config.Misc.SpeedEnabled = value
end)

local speedTypeToggle = UI:AddToggle(MiscTab.Name, "CFrame Speed", Config.Misc.SpeedType == "CFrame", function(value)
    Config.Misc.SpeedType = value and "CFrame" or "Normal"
end)

local speedSlider = UI:AddSlider(MiscTab.Name, "Walk Speed", 16, 100, Config.Misc.SpeedValue, function(value)
    Config.Misc.SpeedValue = value
end)

local cframeSpeedSlider = UI:AddSlider(MiscTab.Name, "CFrame Speed", 0.1, 10, Config.Misc.CFrameSpeed, function(value)
    Config.Misc.CFrameSpeed = value
end)

local jumpHeightSlider = UI:AddSlider(MiscTab.Name, "Jump Height", 50, 200, Config.Misc.JumpHeight, function(value)
    Config.Misc.JumpHeight = value
end)

local infJumpToggle = UI:AddToggle(MiscTab.Name, "Infinite Jump", Config.Misc.InfiniteJump, function(value)
    Config.Misc.InfiniteJump = value
end)

local noRecoilToggle = UI:AddToggle(MiscTab.Name, "No Recoil", Config.Misc.NoRecoil, function(value)
    Config.Misc.NoRecoil = value
end)

local autoHealToggle = UI:AddToggle(MiscTab.Name, "Auto Heal", Config.Misc.AutoHeal, function(value)
    Config.Misc.AutoHeal = value
end)

-- Implementation section

-- UI Toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Config.Keybinds.ToggleUI then
        UI.Main.Visible = not UI.Main.Visible
    end
end)

-- FOV Circles (Simple version for UNC support)
local FOVCircles = {}

if UNCSupport.DrawingLibrary then
    -- Aimbot FOV
    FOVCircles.Aimbot = Drawing.new("Circle")
    FOVCircles.Aimbot.Thickness = 1
    FOVCircles.Aimbot.NumSides = 36
    FOVCircles.Aimbot.Radius = Config.Aimbot.FOVSize
    FOVCircles.Aimbot.Filled = false
    FOVCircles.Aimbot.Visible = Config.Aimbot.ShowFOV and Config.Aimbot.Enabled
    FOVCircles.Aimbot.Transparency = 0.8
    FOVCircles.Aimbot.Color = Config.Aimbot.FOVColor
    
    -- TriggerBot FOV
    FOVCircles.TriggerBot = Drawing.new("Circle")
    FOVCircles.TriggerBot.Thickness = 1
    FOVCircles.TriggerBot.NumSides = 36
    FOVCircles.TriggerBot.Radius = Config.TriggerBot.FOVSize
    FOVCircles.TriggerBot.Filled = false
    FOVCircles.TriggerBot.Visible = Config.TriggerBot.Enabled
    FOVCircles.TriggerBot.Transparency = 0.8
    FOVCircles.TriggerBot.Color = Color3.fromRGB(255, 255, 0)
end

-- Function to update FOV circles
local function UpdateFOVCircles()
    if not UNCSupport.DrawingLibrary then return end
    
    FOVCircles.Aimbot.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    FOVCircles.Aimbot.Radius = Config.Aimbot.FOVSize
    FOVCircles.Aimbot.Visible = Config.Aimbot.ShowFOV and Config.Aimbot.Enabled
    
    FOVCircles.TriggerBot.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    FOVCircles.TriggerBot.Radius = Config.TriggerBot.FOVSize
    FOVCircles.TriggerBot.Visible = Config.TriggerBot.Enabled
end

-- Update FOV circles when camera changes
Camera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateFOVCircles)
UpdateFOVCircles()

-- Speed modification
local function UpdateSpeed()
    if not Character or not Humanoid then return end
    
    if Config.Misc.SpeedEnabled then
        if Config.Misc.SpeedType == "Normal" then
            Humanoid.WalkSpeed = Config.Misc.SpeedValue
        end
        -- CFrame speed is handled in the RunService loop
    else
        Humanoid.WalkSpeed = 16 -- Default
    end
    
    -- Jump height
    Humanoid.JumpPower = Config.Misc.JumpHeight
end

-- Infinite Jump
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if Config.Misc.InfiniteJump and input.KeyCode == Enum.KeyCode.Space then
        if Character and Humanoid then
            Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Main update loop
RunService.RenderStepped:Connect(function()
    -- Update player movement
    UpdateSpeed()
    
    -- CFrame Speed implementation
    if Config.Misc.SpeedEnabled and Config.Misc.SpeedType == "CFrame" then
        if Character and HRP and UserInputService:IsKeyDown(Enum.KeyCode.W) then
            HRP.CFrame = HRP.CFrame + (Camera.CFrame.LookVector * Config.Misc.CFrameSpeed)
        end
    end
    
    -- Update FOV circles
    UpdateFOVCircles()
end)

-- ESP implementation (simplified for UNC compatibility)
if UNCSupport.DrawingLibrary then
    local ESPObjects = {}
    
    local function ClearESP()
        for _, objects in pairs(ESPObjects) do
            for _, object in pairs(objects) do
                object:Remove()
            end
        end
        ESPObjects = {}
    end
    
    local function CreateESP(player)
        if player == LocalPlayer then return end
        
        ESPObjects[player] = {
            Box = Drawing.new("Square"),
            Name = Drawing.new("Text"),
            Distance = Drawing.new("Text"),
            Tracer = Drawing.new("Line")
        }
        
        -- Box settings
        ESPObjects[player].Box.Thickness = 1
        ESPObjects[player].Box.Filled = false
        ESPObjects[player].Box.Color = Config.ESP.BoxColor
        ESPObjects[player].Box.Transparency = 0.8
        ESPObjects[player].Box.Visible = false
        
        -- Name settings
        ESPObjects[player].Name.Size = 14
        ESPObjects[player].Name.Center = true
        ESPObjects[player].Name.Outline = true
        ESPObjects[player].Name.Color = Config.ESP.NameColor
        ESPObjects[player].Name.Transparency = 0.8
        ESPObjects[player].Name.Visible = false
        
        -- Distance settings
        ESPObjects[player].Distance.Size = 13
        ESPObjects[player].Distance.Center = true
        ESPObjects[player].Distance.Outline = true
        ESPObjects[player].Distance.Color = Config.ESP.DistanceColor
        ESPObjects[player].Distance.Transparency = 0.8
        ESPObjects[player].Distance.Visible = false
        
        -- Tracer settings
        ESPObjects[player].Tracer.Thickness = 1
        ESPObjects[player].Tracer.Color = Config.ESP.TracerColor
        ESPObjects[player].Tracer.Transparency = 0.8
        ESPObjects[player].Tracer.Visible = false
    end
    
    -- Create ESP for existing players
    for _, player in ipairs(Players:GetPlayers
