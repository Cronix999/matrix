-- MatrixHub-Style Evade.cc - Enhanced PvP Script
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer
local Camera = game.Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Check if Drawing library is available
local DrawingLibrary = Drawing or nil
if not DrawingLibrary then
    warn("Drawing library not available - ESP features will be limited")
end

-- Feature configuration
local Config = {
    Aimbot = {
        Enabled = false,
        Key = "MouseButton2",
        KeyMode = "Hold",
        HitPart = "Head",
        Team = false,
        Wall = false,
        FOVSize = 100,
        ShowFOV = true,
        FOVColor = Color3.fromRGB(255, 255, 255),
        Prediction = {
            Enabled = true,
            Value = 0.165
        }
    },
    SilentAim = {
        Enabled = false,
        HitChance = 100,
        FOVSize = 150,
        ShowFOV = true,
        FOVColor = Color3.fromRGB(255, 0, 0)
    },
    TriggerBot = {
        Enabled = false,
        Key = "MouseButton1",
        Delay = 50,
        MinimumDistance = 10,
        MaximumDistance = 300,
        FOVSize = 10,
        ShowFOV = true,
        FOVColor = Color3.fromRGB(255, 255, 0)
    },
    ESP = {
        Enabled = false,
        BoxEnabled = false,
        BoxColor = Color3.fromRGB(255, 0, 0),
        SkeletonEnabled = false,
        SkeletonColor = Color3.fromRGB(255, 255, 255),
        NameEnabled = false,
        NameColor = Color3.fromRGB(255, 255, 255),
        HealthEnabled = false,
        HealthColor = Color3.fromRGB(0, 255, 0),
        DistanceEnabled = false,
        DistanceColor = Color3.fromRGB(255, 255, 255),
        TracerEnabled = false,
        TracerColor = Color3.fromRGB(255, 0, 0),
        TeamColor = false,
        TeamCheck = false,
        Transparency = 0.8
    },
    Misc = {
        NoRecoil = false,
        AutoHeal = false,
        SpeedEnabled = false,
        SpeedValue = 1,
        JumpHeight = 50,
        InfiniteJump = false
    },
    UI = {
        Visible = true
    },
    Keybinds = {
        ToggleUI = Enum.KeyCode.Insert
    }
}

-- Clean up existing UI
local existingUI = CoreGui:FindFirstChild("MatrixEvadeCC")
if existingUI then
    existingUI:Destroy()
end

-- Clean up ESP
for _, obj in pairs(CoreGui:GetChildren()) do
    if obj.Name:match("^ESP_") then
        obj:Destroy()
    end
end

-- Create a better Matrix Hub-style UI
local MatrixUI = Instance.new("ScreenGui")
MatrixUI.Name = "MatrixEvadeCC"
MatrixUI.ResetOnSpawn = false
MatrixUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
MatrixUI.Parent = CoreGui

-- Helper functions for UI creation
local function createUIElement(className, properties, parent)
    local element = Instance.new(className)
    for property, value in pairs(properties) do
        element[property] = value
    end
    element.Parent = parent
    return element
end

-- Create Shadow Effect
local function createShadow(parent, offset)
    local shadow = createUIElement("Frame", {
        Size = UDim2.new(1, 4, 1, 4),
        Position = UDim2.new(0, offset, 0, offset),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.7,
        BorderSizePixel = 0,
        ZIndex = parent.ZIndex - 1
    }, parent.Parent)
    return shadow
end

-- MatrixHub Style UI Colors
local MatrixColors = {
    Background = Color3.fromRGB(25, 25, 30),
    DarkBackground = Color3.fromRGB(20, 20, 25),
    LightBackground = Color3.fromRGB(30, 30, 35),
    Accent = Color3.fromRGB(0, 180, 255),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(200, 200, 200),
    Border = Color3.fromRGB(40, 40, 45),
    Highlight = Color3.fromRGB(50, 50, 60),
    Success = Color3.fromRGB(0, 255, 140),
    Error = Color3.fromRGB(255, 0, 68)
}

-- Main UI Frame
local MainFrame = createUIElement("Frame", {
    Size = UDim2.new(0, 450, 0, 350),
    Position = UDim2.new(0.5, -225, 0.5, -175),
    BackgroundColor3 = MatrixColors.Background,
    BorderSizePixel = 0,
    ClipsDescendants = true,
    Active = true,
    ZIndex = 10
}, MatrixUI)

local MainFrameShadow = createShadow(MainFrame, 3)

-- Apply rounded corners
local MainCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 8)
}, MainFrame)

-- Title Bar with gradient
local TitleBar = createUIElement("Frame", {
    Size = UDim2.new(1, 0, 0, 36),
    BackgroundColor3 = MatrixColors.DarkBackground,
    BorderSizePixel = 0,
    ZIndex = 11
}, MainFrame)

local TitleCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 8)
}, TitleBar)

-- Title Bar Bottom Cover (to make only top corners rounded)
local TitleBarCover = createUIElement("Frame", {
    Size = UDim2.new(1, 0, 0, 10),
    Position = UDim2.new(0, 0, 1, -10),
    BackgroundColor3 = MatrixColors.DarkBackground,
    BorderSizePixel = 0,
    ZIndex = 11
}, TitleBar)

-- Matrix Hub Logo
local LogoContainer = createUIElement("Frame", {
    Size = UDim2.new(0, 30, 0, 30),
    Position = UDim2.new(0, 10, 0, 3),
    BackgroundTransparency = 1,
    ZIndex = 12
}, TitleBar)

-- Create Matrix grid logo
for i = 1, 3 do
    for j = 1, 3 do
        local dot = createUIElement("Frame", {
            Size = UDim2.new(0, 6, 0, 6),
            Position = UDim2.new(0, (i-1)*10, 0, (j-1)*10),
            BackgroundColor3 = MatrixColors.Accent,
            BorderSizePixel = 0,
            ZIndex = 13
        }, LogoContainer)
        
        createUIElement("UICorner", {
            CornerRadius = UDim.new(1, 0)
        }, dot)
    end
end

-- Title Text
local TitleText = createUIElement("TextLabel", {
    Size = UDim2.new(0, 200, 1, 0),
    Position = UDim2.new(0, 50, 0, 0),
    BackgroundTransparency = 1,
    Text = "MATRIX | EVADE.CC",
    TextColor3 = MatrixColors.Text,
    TextSize = 18,
    Font = Enum.Font.GothamBold,
    TextXAlignment = Enum.TextXAlignment.Left,
    ZIndex = 12
}, TitleBar)

-- Close Button
local CloseButton = createUIElement("TextButton", {
    Size = UDim2.new(0, 36, 0, 36),
    Position = UDim2.new(1, -36, 0, 0),
    BackgroundTransparency = 1,
    Text = "✕",
    TextColor3 = MatrixColors.SubText,
    TextSize = 18,
    Font = Enum.Font.GothamBold,
    ZIndex = 12
}, TitleBar)

-- Minimize Button
local MinimizeButton = createUIElement("TextButton", {
    Size = UDim2.new(0, 36, 0, 36),
    Position = UDim2.new(1, -72, 0, 0),
    BackgroundTransparency = 1,
    Text = "−",
    TextColor3 = MatrixColors.SubText,
    TextSize = 18,
    Font = Enum.Font.GothamBold,
    ZIndex = 12
}, TitleBar)

-- Status indicator
local StatusIndicator = createUIElement("Frame", {
    Size = UDim2.new(0, 8, 0, 8),
    Position = UDim2.new(1, -100, 0.5, -4),
    BackgroundColor3 = MatrixColors.Success,
    ZIndex = 12
}, TitleBar)

createUIElement("UICorner", {
    CornerRadius = UDim.new(1, 0)
}, StatusIndicator)

local StatusText = createUIElement("TextLabel", {
    Size = UDim2.new(0, 80, 1, 0),
    Position = UDim2.new(1, -90, 0, 0),
    BackgroundTransparency = 1,
    Text = "RUNNING",
    TextColor3 = MatrixColors.SubText,
    TextSize = 12,
    Font = Enum.Font.Gotham,
    TextXAlignment = Enum.TextXAlignment.Left,
    ZIndex = 12
}, TitleBar)

-- Content Frame
local ContentFrame = createUIElement("Frame", {
    Size = UDim2.new(1, 0, 1, -36),
    Position = UDim2.new(0, 0, 0, 36),
    BackgroundColor3 = MatrixColors.Background,
    BorderSizePixel = 0,
    ZIndex = 10
}, MainFrame)

-- Tab System - Side navigation
local SideNav = createUIElement("Frame", {
    Size = UDim2.new(0, 100, 1, 0),
    BackgroundColor3 = MatrixColors.DarkBackground,
    BorderSizePixel = 0,
    ZIndex = 11
}, ContentFrame)

local SideNavCorner = createUIElement("UICorner", {
    CornerRadius = UDim.new(0, 8)
}, SideNav)

-- Side Nav Right Cover
local SideNavCover = createUIElement("Frame", {
    Size = UDim2.new(0, 10, 1, 0),
    Position = UDim2.new(1, -10, 0, 0),
    BackgroundColor3 = MatrixColors.DarkBackground,
    BorderSizePixel = 0,
    ZIndex = 11
}, SideNav)

-- Tab Content Area
local TabContent = createUIElement("Frame", {
    Size = UDim2.new(1, -100, 1, 0),
    Position = UDim2.new(0, 100, 0, 0),
    BackgroundColor3 = MatrixColors.Background,
    BorderSizePixel = 0,
    ClipsDescendants = true,
    ZIndex = 11
}, ContentFrame)

-- Create Tabs
local Tabs = {
    "Aimbot",
    "ESP",
    "Trigger",
    "Misc",
    "Settings"
}

local TabFrames = {}
local TabButtons = {}
local ActiveTab = "Aimbot"

-- Function to switch tabs
local function switchTab(tabName)
    ActiveTab = tabName
    for name, frame in pairs(TabFrames) do
        frame.Visible = (name == tabName)
    end
    
    for _, button in pairs(TabButtons) do
        button.BackgroundColor3 = MatrixColors.DarkBackground
        button.TextLabel.TextColor3 = MatrixColors.SubText
        button.Indicator.BackgroundTransparency = 1
    end
    
    local selectedButton = TabButtons[tabName]
    if selectedButton then
        selectedButton.BackgroundColor3 = MatrixColors.LightBackground
        selectedButton.TextLabel.TextColor3 = MatrixColors.Text
        selectedButton.Indicator.BackgroundTransparency = 0
    end
end

-- Create tab buttons and frames
for i, tabName in ipairs(Tabs) do
    -- Tab Button
    local TabButton = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 36),
        Position = UDim2.new(0, 0, 0, 10 + (i-1) * 40),
        BackgroundColor3 = (tabName == ActiveTab) and MatrixColors.LightBackground or MatrixColors.DarkBackground,
        BorderSizePixel = 0,
        ZIndex = 12
    }, SideNav)
    
    -- Selection Indicator
    local TabIndicator = createUIElement("Frame", {
        Size = UDim2.new(0, 3, 0, 20),
        Position = UDim2.new(0, 0, 0.5, -10),
        BackgroundColor3 = MatrixColors.Accent,
        BorderSizePixel = 0,
        BackgroundTransparency = (tabName == ActiveTab) and 0 or 1,
        ZIndex = 12
    }, TabButton)
    
    -- Tab Label
    local TabLabel = createUIElement("TextLabel", {
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = tabName:upper(),
        TextColor3 = (tabName == ActiveTab) and MatrixColors.Text or MatrixColors.SubText,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 12
    }, TabButton)
    
    -- Make button clickable
    local TabButtonClickArea = createUIElement("TextButton", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "",
        ZIndex = 13
    }, TabButton)
    
    TabButtonClickArea.MouseButton1Click:Connect(function()
        switchTab(tabName)
    end)
    
    -- Store references
    TabButton.TextLabel = TabLabel
    TabButton.Indicator = TabIndicator
    TabButtons[tabName] = TabButton
    
    -- Tab Content Frame
    local TabFrame = createUIElement("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = MatrixColors.Accent,
        Visible = tabName == ActiveTab,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollingDirection = Enum.ScrollingDirection.Y,
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        ZIndex = 12
    }, TabContent)
    
    TabFrames[tabName] = TabFrame
end

-- Create section container
local function createSection(title, parent)
    local sectionCount = #parent:GetChildren()
    local yPos = (sectionCount == 0) and 10 or (sectionCount * 160)
    
    local section = createUIElement("Frame", {
        Size = UDim2.new(1, -20, 0, 150),
        Position = UDim2.new(0, 10, 0, yPos),
        BackgroundColor3 = MatrixColors.LightBackground,
        BorderSizePixel = 0,
        ZIndex = 13
    }, parent)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 6)
    }, section)
    
    local sectionTitle = createUIElement("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = MatrixColors.Text,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 14
    }, section)
    
    local sectionContainer = createUIElement("Frame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundTransparency = 1,
        ZIndex = 14
    }, section)
    
    return section, sectionContainer
end

-- Create a modern toggle button function
local function createToggle(name, parent, callback, initialState)
    local toggleCount = #parent:GetChildren()
    local toggleContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, toggleCount * 35),
        BackgroundTransparency = 1,
        ZIndex = 15
    }, parent)
    
    local toggleLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.7, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = MatrixColors.Text,
        TextSize = 13,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 15
    }, toggleContainer)
    
    local toggleBackground = createUIElement("Frame", {
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0.5, -10),
        BackgroundColor3 = initialState and MatrixColors.Accent or MatrixColors.Border,
        BorderSizePixel = 0,
        ZIndex = 15
    }, toggleContainer)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, toggleBackground)
    
    local toggleIndicator = createUIElement("Frame", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(initialState and 0.6 or 0.05, 0, 0.5, -8),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        ZIndex = 16
    }, toggleBackground)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, toggleIndicator)
    
    -- Click handler
    local toggleButton = createUIElement("TextButton", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "",
        ZIndex = 16
    }, toggleContainer)
    
    local toggleActive = initialState
    
    toggleButton.MouseButton1Click:Connect(function()
        toggleActive = not toggleActive
        
        -- Animations
        local indicatorPosition = toggleActive and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.05, 0, 0.5, -8)
        local backgroundColor = toggleActive and MatrixColors.Accent or MatrixColors.Border
        
        TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = indicatorPosition}):Play()
        TweenService:Create(toggleBackground, TweenInfo.new(0.2), {BackgroundColor3 = backgroundColor}):Play()
        
        -- Callback
        callback(toggleActive)
    end)
    
    return toggleContainer, function(state)
        toggleActive = state
        local indicatorPosition = toggleActive and UDim2.new(0.6, 0, 0.5, -8) or UDim2.new(0.05, 0, 0.5, -8)
        local backgroundColor = toggleActive and MatrixColors.Accent or MatrixColors.Border
        
        toggleIndicator.Position = indicatorPosition
        toggleBackground.BackgroundColor3 = backgroundColor
    end
end

-- Create a slider function
local function createSlider(name, parent, min, max, initialValue, callback, suffix)
    suffix = suffix or ""
    local sliderCount = #parent:GetChildren()
    local sliderContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 50),
        Position = UDim2.new(0, 0, 0, sliderCount * 55),
        BackgroundTransparency = 1,
        ZIndex = 15
    }, parent)
    
    local sliderLabel = createUIElement("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = MatrixColors.Text,
        TextSize = 13,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 15
    }, sliderContainer)
    
    local valueLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0, 0),
        BackgroundTransparency = 1,
        Text = tostring(initialValue) .. suffix,
        TextColor3 = MatrixColors.Accent,
        TextSize = 13,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Right,
        ZIndex = 15
    }, sliderContainer)
    
    local sliderTrack = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 6),
        Position = UDim2.new(0, 0, 0.7, 0),
        BackgroundColor3 = MatrixColors.Border,
        BorderSizePixel = 0,
        ZIndex = 15
    }, sliderContainer)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, sliderTrack)
    
    -- Calculate initial fill percentage
    local initialPercent = (initialValue - min) / (max - min)
    
    local sliderFill = createUIElement("Frame", {
        Size = UDim2.new(initialPercent, 0, 1, 0),
        BackgroundColor3 = MatrixColors.Accent,
        BorderSizePixel = 0,
        ZIndex = 16
    }, sliderTrack)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, sliderFill)
    
    local sliderKnob = createUIElement("Frame", {
        Size = UDim2.new(0, 14, 0, 14),
        Position = UDim2.new(initialPercent, -7, 0.5, -7),
        BackgroundColor3 = MatrixColors.Text,
        BorderSizePixel = 0,
        ZIndex = 17
    }, sliderTrack)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(1, 0)
    }, sliderKnob)
    
    -- Slider Interaction
    local isDragging = false
    
    -- Create invisible button for better interaction
    local sliderButton = createUIElement("TextButton", {
        Size = UDim2.new(1, 0, 1, 10),
        Position = UDim2.new(0, 0, 0, -5),
        BackgroundTransparency = 1,
        Text = "",
        ZIndex = 18
    }, sliderTrack)
    
    local function updateSlider(input)
        local relativeX = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
        local newValue = min + (max - min) * relativeX
        
        -- Round to 1 decimal place
        newValue = math.floor(newValue * 10) / 10
        
        sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        sliderKnob.Position = UDim2.new(relativeX, -7, 0.5, -7)
        valueLabel.Text = tostring(newValue) .. suffix
        callback(newValue)
    end
    
    sliderButton.MouseButton1Down:Connect(function(input)
        isDragging = true
        updateSlider(input)
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    return sliderContainer, function(newValue)
        local newPercent = (newValue - min) / (max - min)
        sliderFill.Size = UDim2.new(newPercent, 0, 1, 0)
        sliderKnob.Position = UDim2.new(newPercent, -7, 0.5, -7)
        valueLabel.Text = tostring(newValue) .. suffix
    end
end

-- Create a keybind selector
local function createKeybind(name, parent, initialKey, callback)
    local keybindCount = #parent:GetChildren()
    local keybindContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, keybindCount * 35),
        BackgroundTransparency = 1,
        ZIndex = 15
    }, parent)
    
    local keybindLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.7, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = MatrixColors.Text,
        TextSize = 13,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 15
    }, keybindContainer)
    
    local keybindButton = createUIElement("TextButton", {
        Size = UDim2.new(0, 70, 0, 20),
        Position = UDim2.new(1, -70, 0.5, -10),
        BackgroundColor3 = MatrixColors.Border,
        BorderSizePixel = 0,
        Text = initialKey.Name,
        TextColor3 = MatrixColors.Text,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        ZIndex = 15
    }, keybindContainer)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 4)
    }, keybindButton)
    
    local currentKey = initialKey
    local isListening = false
    
    keybindButton.MouseButton1Click:Connect(function()
        isListening = true
        keybindButton.Text = "..."
        keybindButton.BackgroundColor3 = MatrixColors.Accent
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if isListening and input.UserInputType == Enum.UserInputType.Keyboard then
            currentKey = input.KeyCode
            keybindButton.Text = input.KeyCode.Name
            keybindButton.BackgroundColor3 = MatrixColors.Border
            isListening = false
            callback(input.KeyCode)
        end
    end)
    
    return keybindContainer, function(newKey)
        currentKey = newKey
        keybindButton.Text = newKey.Name
    end
end

-- Create a dropdown selector
local function createDropdown(name, parent, options, initialValue, callback)
    local dropdownCount = #parent:GetChildren()
    
    local dropdownContainer = createUIElement("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, dropdownCount * 35),
        BackgroundTransparency = 1,
        ZIndex = 15
    }, parent)
    
    local dropdownLabel = createUIElement("TextLabel", {
        Size = UDim2.new(0.5, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = name,
        TextColor3 = MatrixColors.Text,
        TextSize = 13,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 15
    }, dropdownContainer)
    
    local dropdownButton = createUIElement("TextButton", {
        Size = UDim2.new(0.5, -10, 1, -6),
        Position = UDim2.new(0.5, 5, 0, 3),
        BackgroundColor3 = MatrixColors.Border,
        BorderSizePixel = 0,
        Text = initialValue,
        TextColor3 = MatrixColors.Text,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 15
    }, dropdownContainer)
    
    createUIElement("UIPadding", {
        PaddingLeft = UDim.new(0, 8)
    }, dropdownButton)
    
    createUIElement("UICorner", {
        CornerRadius = UDim.new(0, 4)
    }, dropdownButton)
